package br.csi.avaliador_de_projetos.controller;

import br.csi.avaliador_de_projetos.model.aluno.Aluno;
import br.csi.avaliador_de_projetos.model.projeto.Projeto;
import br.csi.avaliador_de_projetos.service.AlunoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/aluno")
@Tag(name = "Alunos", description = "Path relacionado a operações de alunos")
public class AlunoController {
    private AlunoService service;
    public AlunoController(AlunoService service) {
        this.service = service;
    }

//    testar esse método 1o:
//    http://localhost:8080/avaliador-de-projetos/aluno/listar
    @GetMapping("/listar")
    public List<Aluno> listar(){
        return this.service.listar();
    }



//    testar esse método 1o
//    http://localhost:8080/avaliador-de-projetos/aluno/1
    @Operation(summary = "Buscar usuário", description = "Busca um usuário pelo ID") //descrição do endpoint
    @ApiResponses(value = { //respostas possiveis que o endpoint pode retornar + descrição
            @ApiResponse(responseCode = "200", description = "usuário encontrado",
            content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Aluno.class))}), //tipo de retorno e formato do objeto
            @ApiResponse(responseCode = "404", description = "usuário não encontrado")
    })
    @GetMapping("/{id}")
    public Aluno aluno(@Parameter(description = "ID do usuário a ser buscado") @PathVariable long id){
        return this.service.getAluno(id);
    }



//    exemplo de uso para @RequestBody e POST
//    http://localhost:8080/avaliador-de-projetos/aluno/print-json
//    POST: mandar json em body
    @PostMapping("/print-json")
    public void printJson(@RequestBody String json){
        System.out.println(json);
    }



//    http://localhost:8080/avaliador-de-projetos/aluno -- mandar json em body
    @Operation(summary = "Criar novo usuário", description = "criar um novo usuario no banco de dados e adiciona na lista") //define titulo e dados do endpoint
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Usuário criado com sucesso",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = Aluno.class))), //tipo de dado que retorna
            @ApiResponse(responseCode = "400", description = "Dados fornecidos inválidos", content = @Content)
    })
    @PostMapping()
    @Transactional
//    public void salvar(@RequestBody @Valid Aluno aluno){ this.service.salvar(aluno); }
    public ResponseEntity<Aluno> salvar(@RequestBody @Valid Aluno aluno, UriComponentsBuilder uriBuilder){
        this.service.salvar(aluno);
        //monta a URi da aplicação dinamicamnete
        URI uri = uriBuilder.path("/aluno/{uuid}").buildAndExpand(aluno.getUuid()).toUri();
        //created(uri) vai colocar no cabeçalho da requisição da resposta
        //o parametro Location com a URI de acesso ao recurso criado
        return ResponseEntity.created(uri).body(aluno);
    }



//    http://localhost:8080/avaliador-de-projetos/aluno
    @PutMapping() //passar id junto no json
    @Transactional
//    public void atualizar(@RequestBody Aluno aluno){ this.service.atualizar(aluno); }
    public ResponseEntity atualizar(@RequestBody Aluno aluno){
        this.service.atualizar(aluno);
        return ResponseEntity.ok(aluno);
    }



//    http://localhost:8080/avaliador-de-projetos/aluno/1
    @DeleteMapping("/{id}")
//    public void deletar(@PathVariable long id){ this.service.excluir(id); }
    public ResponseEntity deletar(@PathVariable long id){
        this.service.excluir(id);
        return ResponseEntity.noContent().build();
    }


    @PostMapping("/{id}/atribuir-projeto")
    @Transactional
    public ResponseEntity vincularProjeto(@PathVariable long id, @RequestBody Projeto projeto){
        return ResponseEntity.ok(this.service.atribuirProjeto(id, projeto));
    }

}